// This is an autogenerated file from Firebase Studio.
'use server';

/**
 * @fileOverview A food recommendation AI agent.
 *
 * - foodRecommendation - A function that handles the food recommendation process.
 * - FoodRecommendationInput - The input type for the foodRecommendation function.
 * - FoodRecommendationOutput - The return type for the foodRecommendation function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const FoodRecommendationInputSchema = z.object({
  orderHistory: z
    .string()
    .describe('The order history of the user as a string.'),
  dietaryPreferences: z
    .string()
    .describe('The dietary preferences of the user as a string.'),
});
export type FoodRecommendationInput = z.infer<typeof FoodRecommendationInputSchema>;

const FoodRecommendationOutputSchema = z.object({
  recommendations: z
    .string()
    .describe('The personalized food recommendations for the user.'),
});
export type FoodRecommendationOutput = z.infer<typeof FoodRecommendationOutputSchema>;

export async function foodRecommendation(input: FoodRecommendationInput): Promise<FoodRecommendationOutput> {
  return foodRecommendationFlow(input);
}

const prompt = ai.definePrompt({
  name: 'foodRecommendationPrompt',
  input: {schema: FoodRecommendationInputSchema},
  output: {schema: FoodRecommendationOutputSchema},
  prompt: `You are a food recommendation expert. Based on the user's order history and dietary preferences, provide personalized food recommendations.

Order History: {{{orderHistory}}}
Dietary Preferences: {{{dietaryPreferences}}}

Recommendations:`, // Use Handlebars syntax to access input fields
});

const foodRecommendationFlow = ai.defineFlow(
  {
    name: 'foodRecommendationFlow',
    inputSchema: FoodRecommendationInputSchema,
    outputSchema: FoodRecommendationOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
